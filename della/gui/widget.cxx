// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "widget.h"

void Widget::cb_headerImage_i(Avtk::Image*, void*) {
  //system("xdg-open http://www.openavproductions.com/artyfx#ducka");
}
void Widget::cb_headerImage(Avtk::Image* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_headerImage_i(o,v);
}

void Widget::cb_graph_i(Avtk::Delaygraph* o, void*) {
  float tmp = o->value();
time->value( tmp );
writePort(DELLA_TIME, tmp);

volume->value( o->getVolume() );

float a = o->getActive();
writePort(DELLA_ACTIVE, a);
//printf("active %f\n", a );
}
void Widget::cb_graph(Avtk::Delaygraph* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_graph_i(o,v);
}

void Widget::cb_volume_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->setVolume( tmp );
writePort(DELLA_VOLUME, tmp);
}
void Widget::cb_volume(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_volume_i(o,v);
}

void Widget::cb_feedback_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->setFeedback( tmp );
writePort(DELLA_FEEDBACK, tmp);
}
void Widget::cb_feedback(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_feedback_i(o,v);
}

void Widget::cb_time_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->value( tmp );
writePort(DELLA_TIME, tmp);
}
void Widget::cb_time(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_time_i(o,v);
}

/**
   if the type of filter changes, this function will highlight the right button
*/
void Widget::update_button(int button) {
}

Widget::Widget() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(160, 220);
    window->user_data((void*)(this));
    { headerImage = new Avtk::Image(0, 0, 160, 29, "header.png");
      headerImage->box(FL_NO_BOX);
      headerImage->color(FL_BACKGROUND_COLOR);
      headerImage->selection_color(FL_BACKGROUND_COLOR);
      headerImage->labeltype(FL_NORMAL_LABEL);
      headerImage->labelfont(0);
      headerImage->labelsize(14);
      headerImage->labelcolor((Fl_Color)20);
      headerImage->callback((Fl_Callback*)cb_headerImage);
      headerImage->align(Fl_Align(FL_ALIGN_CENTER));
      headerImage->when(FL_WHEN_RELEASE_ALWAYS);
      headerImage->setPixbuf(header.pixel_data,4);
    } // Avtk::Image* headerImage
    { graph = new Avtk::Delaygraph(5, 36, 150, 126, "graph");
      graph->box(FL_UP_BOX);
      graph->color((Fl_Color)179);
      graph->selection_color(FL_INACTIVE_COLOR);
      graph->labeltype(FL_NO_LABEL);
      graph->labelfont(0);
      graph->labelsize(14);
      graph->labelcolor(FL_FOREGROUND_COLOR);
      graph->callback((Fl_Callback*)cb_graph);
      graph->align(Fl_Align(FL_ALIGN_BOTTOM));
      graph->when(FL_WHEN_CHANGED);
    } // Avtk::Delaygraph* graph
    { volume = new Avtk::Dial(64, 169, 38, 37, "Volume");
      volume->box(FL_NO_BOX);
      volume->color((Fl_Color)90);
      volume->selection_color(FL_INACTIVE_COLOR);
      volume->labeltype(FL_NORMAL_LABEL);
      volume->labelfont(0);
      volume->labelsize(10);
      volume->labelcolor(FL_FOREGROUND_COLOR);
      volume->callback((Fl_Callback*)cb_volume);
      volume->align(Fl_Align(FL_ALIGN_BOTTOM));
      volume->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* volume
    { feedback = new Avtk::Dial(14, 169, 37, 37, "Feedback");
      feedback->box(FL_NO_BOX);
      feedback->color((Fl_Color)90);
      feedback->selection_color(FL_INACTIVE_COLOR);
      feedback->labeltype(FL_NORMAL_LABEL);
      feedback->labelfont(0);
      feedback->labelsize(10);
      feedback->labelcolor(FL_FOREGROUND_COLOR);
      feedback->callback((Fl_Callback*)cb_feedback);
      feedback->align(Fl_Align(FL_ALIGN_BOTTOM));
      feedback->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* feedback
    { time = new Avtk::Dial(111, 169, 37, 37, "Time");
      time->box(FL_NO_BOX);
      time->color((Fl_Color)90);
      time->selection_color(FL_INACTIVE_COLOR);
      time->labeltype(FL_NORMAL_LABEL);
      time->labelfont(0);
      time->labelsize(10);
      time->labelcolor(FL_FOREGROUND_COLOR);
      time->callback((Fl_Callback*)cb_time);
      time->align(Fl_Align(FL_ALIGN_BOTTOM));
      time->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* time
    window->color( fl_rgb_color( 17, 17, 17) );
    close_cb( o, 0 );
    window->end();
  } // Fl_Double_Window* window
}

void Widget::idle() {
  Fl::check();
  Fl::flush();
}

int Widget::getWidth() {
  return window->w();
}

int Widget::getHeight() {
  return window->h();
}

void Widget::writePort(int port, float& value) {
  //cout << "port " << port << " value " << value << endl;
  write_function(controller, port, sizeof(float), 0, &value);
}

void Widget::close_cb(Fl_Widget* o, void*) {
  if ((Fl::event() == FL_KEYDOWN || Fl::event() == FL_SHORTCUT) && Fl::event_key() == FL_Escape)
    {
      return; // ignore ESC
    }
    else
    {
      o->hide();
    }
}
