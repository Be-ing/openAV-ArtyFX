# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cxx}
class CutoffUI {open
} {
  Function {update_button(int button)} {
    comment {if the type of filter changes, this function will highlight the right button} open return_type void
  } {
    code {lpf->value(0);
hpf->value(0);
bpf->value(0);
lsf->value(0);
hsf->value(0);

switch(button)
{
  case 0: lpf->value(1); break;
  case 1: hpf->value(1); break;
  case 2: bpf->value(1); break;
  case 3: lsf->value(1); break;
  case 4: hsf->value(1); break;
}} {}
  }
  Function {CutoffUI()} {open
  } {
    Fl_Window window {open
      xywh {575 327 160 220} type Double color 32 resizable
      code0 {\#include "lv2/lv2plug.in/ns/extensions/ui/ui.h"}
      code1 {\#include <iostream>}
      code2 {using namespace std;}
      code3 {\#include "cutoff.h"} visible
    } {
      Fl_Group contents {
        label contents open
        xywh {-1 0 901 220} color 0
      } {
        Fl_Box background {
          label Lowpass
          xywh {10 37 140 178} box UP_BOX color 37 labeltype NO_LABEL
          code0 {\#include "avtk/avtk_background.h"}
          class AvtkBackground
        }
        Fl_Box headerImage {
          label {header.png}
          callback {printf("system() xdg-open now");
system("xdg-open www.openavproductions.com/artyFX/cutoff");} selected
          xywh {0 0 160 36} labelcolor 20 when 6
          code0 {\#include "../avtk/avtk_image.h"}
          code1 {\#include <stdio.h>}
          class AvtkImage
        }
        Fl_Dial freq {
          label freq
          callback {cutoff = o->value();
graph->value( cutoff ); // update graph
writePort(CUTOFF_FREQ, cutoff);}
          xywh {87 163 54 54} color 90 labeltype NO_LABEL
          code0 {\#include "avtk/avtk_dial.h"}
          class AvtkDial
        }
        Fl_Dial graph {
          label graph
          callback {cutoff = o->value();
float g = o->getGain();
gainDial->value( g );
freq->value( cutoff ); // update dial
writePort(CUTOFF_FREQ, cutoff);
writePort(CUTOFF_GAIN, g);}
          xywh {20 63 120 70} box UP_BOX color 179 labeltype NO_LABEL
          code0 {\#include "avtk/avtk_filtergraph.h"}
          class AvtkFiltergraph
        }
        Fl_Button lpf {
          label L
          callback {float tmp = 0;
cout << "writing LSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
AvtkFiltergraph::Type t = static_cast<AvtkFiltergraph::Type>(tmp);
graph->setType(t);
static const char* lowpass = "Lowpass";
background->label = lowpass;
background->redraw();}
          xywh {20 139 20 20}
          code0 {\#include "avtk/avtk_light_button.h"}
          class AvtkLightButton
        }
        Fl_Button hpf {
          label H
          callback {float tmp = 1;
cout << "writing HSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
AvtkFiltergraph::Type t = static_cast<AvtkFiltergraph::Type>(tmp);
graph->setType(t);
static const char* highpass = "Highpass";
background->label = highpass;
background->redraw();}
          xywh {45 139 20 20}
          code0 {\#include "avtk/avtk_button.h"}
          class AvtkLightButton
        }
        Fl_Button bpf {
          label B
          callback {float tmp = 2;
cout << "writing BPF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
AvtkFiltergraph::Type t = static_cast<AvtkFiltergraph::Type>(tmp);
graph->setType(t);
static const char* bandpass = "Bandpass";
background->label = bandpass;
background->redraw();}
          xywh {70 139 20 20}
          code0 {\#include "avtk/avtk_button.h"}
          class AvtkLightButton
        }
        Fl_Button lsf {
          label LS
          callback {float tmp = 3;
cout << "writing LSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
AvtkFiltergraph::Type t = static_cast<AvtkFiltergraph::Type>(tmp);
graph->setType(t);
static const char* lowshelf = "Lowshelf";
background->label = lowshelf;
background->redraw();}
          xywh {95 139 20 20}
          code0 {\#include "avtk/avtk_button.h"}
          class AvtkLightButton
        }
        Fl_Button hsf {
          label HS
          callback {float tmp = 4;
cout << "writing HSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
AvtkFiltergraph::Type t = static_cast<AvtkFiltergraph::Type>(tmp);
graph->setType(t);
static const char* highshelf = "Highshelf";
background->label = highshelf;
background->redraw();}
          xywh {120 139 20 20}
          code0 {\#include "avtk/avtk_button.h"}
          code1 {\#include <iostream>}
          class AvtkLightButton
        }
        Fl_Dial gainDial {
          label gain
          callback {gain = o->value();
graph->setGain( gain ); // update graph
writePort(CUTOFF_GAIN, gain);}
          xywh {19 176 30 25} color 90 labeltype NO_LABEL
          code0 {\#include "avtk/avtk_dial.h"}
          class AvtkDial
        }
        Fl_Dial q {
          label Q
          callback {Q = o->value();
graph->setBandwidth( Q );
writePort(CUTOFF_Q, Q);}
          xywh {53 176 30 25} color 90 labeltype NO_LABEL
          code0 {\#include "avtk/avtk_dial.h"}
          class AvtkDial
        }
      }
    }
    code {lpf->value( 1 );} {}
  }
  decl {LV2UI_Write_Function write_function;} {public local
  }
  decl {LV2UI_Controller controller;} {public local
  }
  Function {idle()} {open return_type void
  } {
    code {Fl::check();
Fl::flush();} {}
  }
  Function {getWidth()} {open return_type int
  } {
    code {return window->w();} {}
  }
  Function {getHeight()} {open return_type int
  } {
    code {return window->h();} {}
  }
  decl {float gain;} {private local
  }
  decl {float cutoff;} {private local
  }
  decl {float Q;} {private local
  }
  Function {writePort(int port, float& value)} {open
  } {
    code {cout << "port " << port << " value " << value << endl;
write_function(controller, port, sizeof(float), 0, &value);} {}
  }
} 
