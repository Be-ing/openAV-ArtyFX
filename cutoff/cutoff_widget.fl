# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cxx}
class CutoffUI {open
} {
  Function {update_button(int button)} {
    comment {if the type of filter changes, this function will highlight the right button} open return_type void
  } {
    code {lpf->value(0);
hpf->value(0);
bpf->value(0);
lsf->value(0);
hsf->value(0);

switch(button)
{
  case 0: lpf->value(1); break;
  case 1: hpf->value(1); break;
  case 2: bpf->value(1); break;
  case 3: lsf->value(1); break;
  case 4: hsf->value(1); break;
}} {}
  }
  Function {CutoffUI()} {open
  } {
    Fl_Window window {open
      xywh {1572 413 160 220} type Double resizable
      code0 {\#include "lv2/lv2plug.in/ns/extensions/ui/ui.h"}
      code1 {\#include <iostream>}
      code2 {using namespace std;}
      code3 {\#include "cutoff.h"} visible
    } {
      Fl_Box headerImage {
        label {header.png}
        callback {//printf("system() xdg-open now");
//system("xdg-open www.openavproductions.com/artyFX/cutoff");}
        xywh {0 0 160 29} labelcolor 20 when 6
        code0 {\#include "header.c"}
        code1 {headerImage->setPixbuf(header.pixel_data,4);}
        class Image
      }
      Fl_Dial freq {
        label Freq
        callback {cutoff = o->value();
graph->value( cutoff ); // update graph
writePort(CUTOFF_FREQ, cutoff);}
        xywh {113 169 37 37} color 90 labelsize 10
        code0 {\#include "../avtk/avtk.h"}
        code1 {\#include <stdio.h>}
        code2 {using namespace Avtk;}
        class Dial
      }
      Fl_Dial graph {
        label graph
        callback {cutoff = o->value();
float g = o->getGain();
gainDial->value( g );
freq->value( cutoff ); // update dial
writePort(CUTOFF_FREQ, cutoff);
writePort(CUTOFF_GAIN, g);}
        xywh {5 36 150 100} box UP_BOX color 179 labeltype NO_LABEL
        class Filtergraph
      }
      Fl_Button lpf {
        label Lo
        callback {float tmp = 0;
cout << "writing LSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
Filtergraph::Type t = static_cast<Filtergraph::Type>(tmp);
graph->setType(t);}
        xywh {5 140 26 21}
        class LightButton
      }
      Fl_Button hpf {
        label Hi
        callback {float tmp = 1;
cout << "writing HSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
Filtergraph::Type t = static_cast<Filtergraph::Type>(tmp);
graph->setType(t);}
        xywh {37 140 26 21}
        class LightButton
      }
      Fl_Button bpf {
        label Ba
        callback {float tmp = 2;
cout << "writing BPF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
Filtergraph::Type t = static_cast<Filtergraph::Type>(tmp);
graph->setType(t);}
        xywh {67 140 26 21}
        class LightButton
      }
      Fl_Button lsf {
        label LS
        callback {float tmp = 3;
cout << "writing LSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
Filtergraph::Type t = static_cast<Filtergraph::Type>(tmp);
graph->setType(t);}
        xywh {97 140 26 21}
        class LightButton
      }
      Fl_Button hsf {
        label HS
        callback {float tmp = 4;
cout << "writing HSF" << endl;
write_function(controller, CUTOFF_TYPE, sizeof(float), 0, &tmp);
update_button(tmp);
Filtergraph::Type t = static_cast<Filtergraph::Type>(tmp);
graph->setType(t);}
        xywh {128 140 26 21}
        code1 {\#include <iostream>}
        class LightButton
      }
      Fl_Dial gainDial {
        label Gain
        callback {gain = o->value();
graph->setGain( gain ); // update graph
writePort(CUTOFF_GAIN, gain);} selected
        xywh {10 169 37 37} color 90 labelsize 10
        class Dial
      }
      Fl_Dial q {
        label Q
        callback {Q = o->value();
graph->setBandwidth( Q );
writePort(CUTOFF_Q, Q);}
        xywh {62 169 37 37} color 90 labelsize 10
        class Dial
      }
    }
    code {lpf->value( 1 );} {}
  }
  decl {LV2UI_Write_Function write_function;} {public local
  }
  decl {LV2UI_Controller controller;} {public local
  }
  Function {idle()} {open return_type void
  } {
    code {Fl::check();
Fl::flush();} {}
  }
  Function {getWidth()} {open return_type int
  } {
    code {return window->w();} {}
  }
  Function {getHeight()} {open return_type int
  } {
    code {return window->h();} {}
  }
  decl {float gain;} {private local
  }
  decl {float cutoff;} {private local
  }
  decl {float Q;} {private local
  }
  Function {writePort(int port, float& value)} {open
  } {
    code {cout << "port " << port << " value " << value << endl;
write_function(controller, port, sizeof(float), 0, &value);} {}
  }
} 
