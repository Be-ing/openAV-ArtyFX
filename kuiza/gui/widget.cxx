// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "widget.h"

void Widget::cb_headerImage_i(Avtk::Image*, void*) {
  //system("xdg-open http://www.openavproductions.com/artyfx#ducka");
}
void Widget::cb_headerImage(Avtk::Image* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_headerImage_i(o,v);
}

void Widget::cb_masterGain_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->setGain( 0, tmp );
writePort(KUIZA_GAIN, tmp);
}
void Widget::cb_masterGain(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_masterGain_i(o,v);
}

void Widget::cb_graph_i(Avtk::Parameteric* o, void*) {
  float tmp = o->getVolume();
masterGain->value( tmp );
writePort(KUIZA_GAIN, tmp);

float a = o->getActive();
writePort(KUIZA_ACTIVE, a);
//printf("active %f\n", a );
}
void Widget::cb_graph(Avtk::Parameteric* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_graph_i(o,v);
}

void Widget::cb_s1gain_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->setGain( 1, tmp );
writePort(KUIZA_GAIN_S1, tmp);
}
void Widget::cb_s1gain(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_s1gain_i(o,v);
}

void Widget::cb_s2gain_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->setGain( 2, tmp );
writePort(KUIZA_GAIN_S2, tmp);
}
void Widget::cb_s2gain(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_s2gain_i(o,v);
}

void Widget::cb_s3gain_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->setGain( 3, tmp );
writePort(KUIZA_GAIN_S3, tmp);
}
void Widget::cb_s3gain(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_s3gain_i(o,v);
}

void Widget::cb_s4gain_i(Avtk::Dial* o, void*) {
  float tmp = o->value();
graph->setGain( 4, tmp );
writePort(KUIZA_GAIN_S4, tmp);
}
void Widget::cb_s4gain(Avtk::Dial* o, void* v) {
  ((Widget*)(o->parent()->user_data()))->cb_s4gain_i(o,v);
}

/**
   if the type of filter changes, this function will highlight the right button
*/
void Widget::update_button(int button) {
}

Widget::Widget() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(160, 220);
    window->user_data((void*)(this));
    { headerImage = new Avtk::Image(0, 0, 160, 29, "header.png");
      headerImage->box(FL_NO_BOX);
      headerImage->color(FL_BACKGROUND_COLOR);
      headerImage->selection_color(FL_BACKGROUND_COLOR);
      headerImage->labeltype(FL_NORMAL_LABEL);
      headerImage->labelfont(0);
      headerImage->labelsize(14);
      headerImage->labelcolor((Fl_Color)20);
      headerImage->callback((Fl_Callback*)cb_headerImage);
      headerImage->align(Fl_Align(FL_ALIGN_CENTER));
      headerImage->when(FL_WHEN_RELEASE_ALWAYS);
      headerImage->setPixbuf(header.pixel_data,4);
    } // Avtk::Image* headerImage
    { masterGain = new Avtk::Dial(119, 168, 40, 36, "Gain");
      masterGain->box(FL_NO_BOX);
      masterGain->color((Fl_Color)90);
      masterGain->selection_color(FL_INACTIVE_COLOR);
      masterGain->labeltype(FL_NORMAL_LABEL);
      masterGain->labelfont(0);
      masterGain->labelsize(10);
      masterGain->labelcolor(FL_FOREGROUND_COLOR);
      masterGain->callback((Fl_Callback*)cb_masterGain);
      masterGain->align(Fl_Align(FL_ALIGN_BOTTOM));
      masterGain->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* masterGain
    { graph = new Avtk::Parameteric(5, 36, 150, 126, "graph");
      graph->box(FL_UP_BOX);
      graph->color((Fl_Color)179);
      graph->selection_color(FL_INACTIVE_COLOR);
      graph->labeltype(FL_NO_LABEL);
      graph->labelfont(0);
      graph->labelsize(14);
      graph->labelcolor(FL_FOREGROUND_COLOR);
      graph->callback((Fl_Callback*)cb_graph);
      graph->align(Fl_Align(FL_ALIGN_BOTTOM));
      graph->when(FL_WHEN_CHANGED);
    } // Avtk::Parameteric* graph
    { s1gain = new Avtk::Dial(0, 167, 30, 29);
      s1gain->box(FL_NO_BOX);
      s1gain->color((Fl_Color)90);
      s1gain->selection_color(FL_INACTIVE_COLOR);
      s1gain->labeltype(FL_NORMAL_LABEL);
      s1gain->labelfont(0);
      s1gain->labelsize(10);
      s1gain->labelcolor(FL_FOREGROUND_COLOR);
      s1gain->callback((Fl_Callback*)cb_s1gain);
      s1gain->align(Fl_Align(FL_ALIGN_BOTTOM));
      s1gain->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* s1gain
    { s2gain = new Avtk::Dial(27, 189, 30, 29);
      s2gain->box(FL_NO_BOX);
      s2gain->color((Fl_Color)90);
      s2gain->selection_color(FL_INACTIVE_COLOR);
      s2gain->labeltype(FL_NORMAL_LABEL);
      s2gain->labelfont(0);
      s2gain->labelsize(10);
      s2gain->labelcolor(FL_FOREGROUND_COLOR);
      s2gain->callback((Fl_Callback*)cb_s2gain);
      s2gain->align(Fl_Align(FL_ALIGN_BOTTOM));
      s2gain->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* s2gain
    { s3gain = new Avtk::Dial(58, 168, 30, 29);
      s3gain->box(FL_NO_BOX);
      s3gain->color((Fl_Color)90);
      s3gain->selection_color(FL_INACTIVE_COLOR);
      s3gain->labeltype(FL_NORMAL_LABEL);
      s3gain->labelfont(0);
      s3gain->labelsize(10);
      s3gain->labelcolor(FL_FOREGROUND_COLOR);
      s3gain->callback((Fl_Callback*)cb_s3gain);
      s3gain->align(Fl_Align(FL_ALIGN_BOTTOM));
      s3gain->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* s3gain
    { s4gain = new Avtk::Dial(90, 188, 30, 29);
      s4gain->box(FL_NO_BOX);
      s4gain->color((Fl_Color)90);
      s4gain->selection_color(FL_INACTIVE_COLOR);
      s4gain->labeltype(FL_NORMAL_LABEL);
      s4gain->labelfont(0);
      s4gain->labelsize(10);
      s4gain->labelcolor(FL_FOREGROUND_COLOR);
      s4gain->callback((Fl_Callback*)cb_s4gain);
      s4gain->align(Fl_Align(FL_ALIGN_BOTTOM));
      s4gain->when(FL_WHEN_CHANGED);
    } // Avtk::Dial* s4gain
    window->color( fl_rgb_color( 17, 17, 17) );
    close_cb( o, 0 );
    window->end();
  } // Fl_Double_Window* window
}

void Widget::idle() {
  Fl::check();
  Fl::flush();
}

int Widget::getWidth() {
  return window->w();
}

int Widget::getHeight() {
  return window->h();
}

void Widget::writePort(int port, float& value) {
  //cout << "port " << port << " value " << value << endl;
  write_function(controller, port, sizeof(float), 0, &value);
}

void Widget::close_cb(Fl_Widget* o, void*) {
  if ((Fl::event() == FL_KEYDOWN || Fl::event() == FL_SHORTCUT) && Fl::event_key() == FL_Escape)
    {
      return; // ignore ESC
    }
    else
    {
      o->hide();
    }
}
